
NOUT = 100
TIMESTEP = 10

TwistShift = false  # use twist-shift condition?
ballooning = false  # ballooning transformation?
shiftinitial = false
ShiftWithoutTwist=false

MYG=1
MXG=2

grid = "rotating-ellipse-36x8x32-ix20.fci.nc"

NXPE=1

dump_format = nc

[restart]
init_missing=true # initialize missing variables on restart?

[mesh]
symmetricGlobalX = true

extrapolate_y = false   # Extrapolate metrics into Y boundary cells?

[mesh:paralleltransform]
type = fci

##################################################
# derivative methods

[ddx]

first = C2
second = C2
upwind = W3

[ddy]

first = C2
second = C2
upwind = W3

[ddz]

first = C2
second = C2
upwind = W3

###################################################
# Time-integration solver

[solver]

# Note: If evolving neutrals, need preconditioning
# type = cvode
# use_precon = true

ATOL = 1.0e-10  # absolute tolerance
RTOL = 1.0e-5   # relative tolerance
mxstep = 1000000  # Maximum internal steps per output

cvode_max_order = 2
cvode_stability_limit_detection = true

[laplace]  # This is used for Delp2 operator
all_terms = true
nonuniform = true

##################################################
# Electrostatic potential solver

[phiSolver]
type   = petsc  # Needed if Boussinesq = false
ksptype = gmres # Linear iterative method
pctype = lu # Preconditioner. Direct "lu" or "ilu"; iterative "jacobi", "sor"

# Set package to perform factorisation for direct solves
# "petsc" built-in solver only serial
# "superlu", "superlu_dist", "mumps", "cusparse"
factor_package = superlu_dist

inner_boundary_flags = 2

all_terms = true #false
nonuniform = true   # NOTE: Necessary to avoid numerical instability

[laplacexy]  # 2D solver in X-Y
pctype = sor    # Preconditioner

atol = 1e-12
rtol = 1e-8

core_bndry_dirichlet = false
pf_bndry_dirichlet = true
y_bndry_dirichlet = false

include_y_derivs = true

[laplacexz]
type = petsc
inner_boundary_flags = 32
outer_boundary_flags = 0


[aparSolver]
type = petsc
inner_boundary_flags = 0
outer_boundary_flags = 0

all_terms = true
nonuniform = true

# general settings for the model
[input]

transform_from_field_aligned=False

[Hermes]
loadmetric = false
newXZsolver = true

#######################
# Output variables
output_ddt = false # Output time derivatives
verbose = true     # Output additional fields

#######################
# radial buffers
radial_buffers = false
radial_inner_width = 4
radial_outer_width = 4
radial_buffer_D = 0.1

resistivity_boundary = 0
resistivity_boundary_width = 0

#######################
# Numerical dissipation

vepsi_dissipation = false  # Parallel dissipation on Ve-Vi
vort_dissipation = false
numdiff = 0.01
hyperpar = -1

ne_num_diff = 1e-4
vi_num_diff = 1e-4
ve_num_diff = -1
ve_num_hyper = 1e-1

x_hyper_viscos = 1e-3
z_hyper_viscos = 1e-3

# Flux limiters
kappa_limit_alpha = -1#0.2 # SOLPS style heat flux limiter
eta_limit_alpha   = -1#0.5 # SOLPS style viscosity limiter

#######################
# Electric field and Ohm's law
electromagnetic = true  # Electromagnetic? Otherwise electrostatic
FiniteElMass    = false  # Finite electron mass?

parallel_flow = true

# Electrostatic potential
split_n0 = false  # Solve n=0 separately?
split_n0_psi = false

# NOTE: all currents switched off for fluid run
j_diamag       = false  # Diamagnetic current: Vort <-> Pe
j_par          = false  # Parallel current:    Vort <-> Psi

evolve_te = false
evolve_ti = false

pe_par         = true  # Parallel pressure gradient: Pe <-> Psi
resistivity    = true  # Resistivity: Psi -> Pe
thermal_flux   = false
thermal_force  = false
electron_ion_transfer = false
electron_viscosity = false
ion_viscosity  = false  # Ion parallel viscosity
thermal_conduction = false

frecycle = 0.0  # Neutral gas recycling fraction

carbon_fraction = 0.0

excitation = false # Hydrogen neutral excitation radiation

## Settings for 2D parallel closures
sinks = false
sink_invlpar =  0.2  # 5m parallel connection length
sheath_closure = false
drift_wave = false

#######################
# Transport coefficients
classical_diffusion = false  # Collisional diffusion

anomalous_D = -1  # Anomalous density diffusion [m^2/s]
anomalous_chi = -1 # Anomalous thermal diffusion [m^2/s]
anomalous_nu = -1   # Anomalous viscosity

poloidal_flows = false

magnetic_drift = true
ion_velocity   = true

ion_neutral = false
neutral_friction = false  # Friction between plasma and neutrals

boussinesq = true   # Use Boussinesq approximation

# Radial boundary fluxes
ne_bndry_flux = true
pe_bndry_flux = true
vort_bndry_flux = false

ramp_mesh      = false
ramp_timescale = 1e4

#######################
# Plasma sheath
sheath_model = 0  # 0 = Bohm, 1 = Loizu, 2 = Bohm + free density
sheath_yup = true
sheath_ydown = true
sheath_allow_supersonic = false
sheath_gamma_e = 4   # Electron sheath heat transmission
sheath_gamma_i = 2.5 # Ion sheath heat transmission
neutral_gamma = 0.0

startprofiles = false

core_sources = false # Only sources in the core
adapt_source = false   # Feedback on profiles (PI controller)
energy_source = false   # Constant power per particle (at fixed x). False -> Constant power per volume
# source_p = 1e-2       # Rate based on current error (1/timescale)
# source_i = 1e-6       # Integral of error (1/timescale^2)
source_vary_g11 = false  # Vary source in poloidal angle to better match radial transport

staggered = false

# Normalisation parameters

# Normalisation factors
Nnorm = 1e20
Tnorm = 100
Bnorm = 1
AA = 1  # Atomic mass. 1 = Hydrogen, 2 = Deuterium

[neutral]
type = none    # Neutral model: none, diffusion2d, recycling, fullvelocity, mixed
viscosity = 1  # Dynamic viscosity
bulk = 0       # Bulk (volume) viscosity
conduction = 1 
neutral_gamma = 0.0

nn_floor = 1e-2  # Floor applied when calculating Vn = NVn / Nn
low_n_equilibriate = -1e-4  # If n < nn_floor, evolve Tn and Vn towards plasma values

[All]
scale = 0.0

bndry_all = neumann_o2
bndry_xin = neumann_o2
bndry_xout = neumann_o2

[Ne] # Electron density
scale = 1

#function = 0.1 + 0.01*sin(8*pi*x - 9*z)*gauss(x, 0.21)#1 + 0.27*gauss(x, 0.42)#*gauss(z-3*pi/2.,0.21/4.)#*gauss(y-pi,0.26)
function = 0.1 + 0.01*gauss(x,0.21)
#function = 1 + 0.1*gauss(x-0.5, 0.14)*gauss(z-pi/2.,0.14/2.) + 0.1*gauss(x-0.5, 0.14)*gauss(z-pi,0.14/2.) + 0.1*gauss(x-0.5, 0.14)*gauss(z,0.14/2.) + 0.1*gauss(x-0.5, 0.14)*gauss(z-3*pi/2.,0.14/2.)

source = 2.8e3*gauss(x, 0.21)

[Vort]
scale=0
function = sin(7*z)*sin(3*x-z)*gauss(-x,0.21)*(1+sin(y))#mixmode(y)
bndry_all = dirichlet_o2

[VePsi] # Ve + 0.5*beta_e*mi_me*psi
bndry_core = dirichlet_o2#zerolaplace
bndry_pf   = dirichlet_o2
bndry_xout = dirichlet_o2

[Pe]  # Electron pressure
scale = 1
function = 0.1 + 0.01*cos(z)*(sin(8*pi*x - 30*z)+sin(7*z)+0.5*sin(13*z - 2*pi*x))*gauss(-x,0.21)
#function = 1 + 1.2*(Ne:function-1)
source = Ne:source

[Pi]
scale = 1
#function = 1 + 1.2*(Ne:function-1)
function = 0.1 + 0.01*cos(z)*(sin(8*pi*x - 30*z)+sin(7*z)+0.5*sin(13*z - 2*pi*x))*gauss(-x,0.21)
source = Ne:source

[Ve]
parallel_bndry_yup=1
parallel_bndry_ydown=-1

[Jpar]
parallel_bndry_yup=1
parallel_bndry_ydown=-1

[phi]
# Radial boundaries determined by Laplacian inversion
bndry_xin = none
bndry_xout = none

bndry_all = dirichlet_o2

[Nn]

scale = 5e-2
function = 1

[Vn]

scale = 0
function = 0

bndry_all = dirichlet_o2

[Vn_x]
scale = 0
function = 0
bndry_all = dirichlet_o2

[Vn_y]
scale = 0
function = 0
bndry_all = dirichlet_o2

[Vn_z]
scale = 0
function = 0
bndry_all = dirichlet_o2

[Pn]

scale = 1e-5
function = 1
bndry_all = neumann_o2

[NVn]
bndry_all = dirichlet_o2

